
// PTN Ninja by Craig Laparo is licensed under a Creative Commons
// Attribution-NonCommercial-ShareAlike 4.0 International License.
// http://creativecommons.org/licenses/by-nc-sa/4.0/

$stone-thickness: 0.3vmin;

#viewer {
  display: flex;
  flex-direction: column;
  flex-wrap: nowrap;
  align-items: stretch;
  justify-content: center;
  font-size: 2.5vmin;
  will-change: opacity;

  html.animate-board & {
    transition: opacity $time-smooth $natural;
  }

  html.playmode &,
  html.side-by-side & {
    opacity: 1 !important;
    z-index: 1;
  }
  html.side-by-side & {
    transition: none;
  }

  @media (max-width: $mobile/2) and (orientation: portrait) {
    & {
      font-size: 14px;
    }
  }
  @media (max-height: $mobile/2) and (orientation: landscape) {
    & {
      font-size: 14px;
    }
  }
}

.view-wrapper {
  flex-grow: 1;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;

  > *:last-child {
    will-change: flex-grow;

    html.animate-board #viewer.animated & {
      transition: flex-grow $time-smooth $natural;
    }
  }

  > *:not(.table-wrapper) {
    flex-grow: 1;

    html.editmode &:last-child {
      flex-grow: 0;
    }

    html:not(.board-only) & {
      min-width: $edge;
    }
  }
}

.table-wrapper {
  html.board-3d & {
    perspective: 100vmin;
    perspective-origin: center;
    transform-style: preserve-3d;
  }
}

.table {
  display: table;

  > div {
    display: table-row;

    > div {
      display: table-cell;
      position: relative;
      vertical-align: middle;

      html.animate-board & {
        transition: width $time-smooth $natural;
      }

      &.center {
        z-index: 1;
      }
    }

    html.animate-board & {
      transition: height $time-smooth $natural;
    }
  }

  html.board-3d & {
    transform-style: preserve-3d;
  }
  html:not(.board-3d) & {
    transform: none !important;
  }

}

.board {
  background-color: $primary-color-500;
  font-size: inherit;
  z-index: 2;
  will-change: width, height;

  html.animate-board #viewer.animated & {
    transition: width $time-smooth $natural,
      height $time-smooth $natural;
  }

  .squares,
  .pieces {
    @include position-fill;
  }

  .squares {
    background-color: darken($primary-color-300, 1.5%);
  }

  .square {
    position: absolute;

    &.light {
      background-color: $primary-color-300;
    }

    &:before {
      content: '';
      display: block;
      @include position-fill;
      opacity: 0;
      pointer-events: none;
      background-color: $accent-color-500;

      html.animate-board & {
        transition: opacity $time-smooth linear;
      }
    }
    html.square-hl &.active:before {
      opacity: 0.65;
    }

    .road {
      @include position-fill;
      opacity: 0.25;

      > div {
        opacity: 0;
        position: absolute;
        top: 35%;
        bottom: 35%;
        left: 35%;
        right: 35%;

        html.animate-board & {
          transition: opacity $time-smooth/2 $natural,
            background-color $time-smooth $natural;
        }
      }

      .up { top: 0; }
      .down { bottom: 0; }
      .left { left: 0; }
      .right { right: 0; }
    }

    html.show-roads &.up .road .up,
    html.show-roads &.down .road .down,
    html.show-roads &.left .road .left,
    html.show-roads &.right .road .right {
      opacity: 1;
    }
    html.animate-board.show-roads &.up .road .up,
    html.animate-board.show-roads &.down .road .down,
    html.animate-board.show-roads &.left .road .left,
    html.animate-board.show-roads &.right .road .right {
      transition: opacity $time-smooth/2 $natural $time-smooth/2,
        background-color $time-smooth $natural;
    }

    &.p1 .road > div { background-color: $primary-color-100 }
    &.p2 .road > div { background-color: $primary-color-700 }
  }

  .pieces {
    transform-style: preserve-3d;
  }

  .piece {
    position: absolute;
    bottom: 0;
    left: 0;
    will-change: transform, opacity;

    html.animate-board & {
      transition: transform $time-smooth $natural,
        opacity $time-smooth $natural;
    }

    &.unplayed {
      html:not(.show-unplayed-pieces) & {
        opacity: 0;
      }
    }

    .stone, .captive {
      box-shadow: 0 0.5px 2.5px rgba(0,0,0,0.5);

      &.p1 {
        background-color: $primary-color-100;
        border-color: $primary-color-600;
      }
      &.p2 {
        background-color: $primary-color-600;
        border-color: $primary-color-900;
      }
    }

    .stone {
      width: 50%;
      height: 50%;
      margin: 25%;
      border-radius: 10%;
      position: relative;
      will-change: transform;

      html.animate-board & {
        transition: all $time-smooth $natural;
      }
    }

    &:not(.unplayed) .stone.S {
      width: 18.75%;
      border-radius: 27%/10%;
      margin-left: 40.625%;
      will-change: transform, width, border-radius, margin-left, box-shadow;

      &.p1 {
        background-color: $primary-color-50;
        transform: rotate(-45deg);
        box-shadow: -1px 1px 2px 0 rgba(0,0,0,0.14), -1px 1px 5px 0 rgba(0,0,0,0.12), -1px 1px 1px -2px rgba(0,0,0,0.4);

        @media (max-width: $mobile) {
          box-shadow: -1px 1px 2px rgba(0,0,0,0.5);
        }
      }
      &.p2 {
        background-color: $primary-color-700;
        transform: rotate(45deg);
        box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.14), 1px 1px 5px 0 rgba(0,0,0,0.12), 1px 1px 1px -2px rgba(0,0,0,0.4);

        @media (max-width: $mobile) {
          box-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
      }
    }

    .stone.C {
      border-radius: 50%;

      &.p1 {
        background-color: $primary-color-50;
      }
      &.p2 {
        background-color: $primary-color-700;
      }
    }

    .captive {
      position: absolute;
      bottom: 25%;
      right: 25%;
      width: 15%;
      height: 7.5%;
      opacity: 0;
      border-radius: 15%/30%;
      will-change: opacity, right;

      html.animate-board & {
        transition: all $time-smooth $natural;
      }
    }

    &.immovable {
      .stone {
        opacity: 0;

        html.board-3d & {
          opacity: 0.25;
        }
      }

      .captive {
        opacity: 1;
        right: 5%;

        html.board-3d & {
          opacity: 0;
        }
      }
    }
  }
}

#viewer {
  .scores, .ptn {
    position: relative;
    white-space: nowrap;
    height: 2em;
    line-height: 2em;
  }

  .scores {
    overflow: hidden;
    margin-bottom: -2.5em;
    padding-bottom: 0.5em;
    will-change: margin-bottom;

    html.animate-board & {
      transition: margin-bottom $time-smooth $natural;
    }

    html.show-player-scores & {
      opacity: 1;
      margin-bottom: 0;
    }

    > .player1, > .player2 {
      position: absolute;
      top: 0;
      width: 50%;
      display: flex;
      box-sizing: border-box;
      border-radius: $stone-thickness;
      will-change: width;

      html.animate-board & {
        transition: width $time-smooth $natural;
      }
    }

    .name, .score {
      padding: 0 0.5em;
    }

    .name {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    .score {
      will-change: content;
    }

    > .player1 {
      left: 0;
      background-color: $primary-color-100;
      color: $primary-color-700;

      .name {
        padding-right: 0;
        flex-grow: 1;
      }
    }

    > .player2 {
      right: 0;
      background-color: $primary-color-700;
      color: $primary-color-100;

      .name {
        padding-left: 0;
      }

      .score {
        flex-grow: 1;
      }
    }
  }

  .ptn {
    opacity: 0;
    padding-top: 0.5em;
    margin-top: -2.5em;
    will-change: margin-top;
    will-change: content, opacity, margin-top;

    html.animate-board & {
      transition: opacity $time-smooth $natural,
        margin-top $time-smooth $natural;
    }

    html.show-current-move & {
      opacity: 1;
      margin-top: 0;
    }

    .space:first-child, .comment {
      display: none;
    }

    .player1, .player2 {
      padding: 0 0.2em;
    }
  }
}


.labels {
  @include unselectable;
  color: $primary-color-100;
  display: flex;
  justify-content: space-around;
  opacity: 0;

  html.show-axis-labels & {
    opacity: 1;
  }

  &.row {
    will-change: opacity, right;

    html.animate-board & {
      transition: opacity $time-smooth $natural,
        right $time-smooth $natural;
    }

    html.show-axis-labels & {
      right: 0;
    }

    position: absolute;
    top: 0;
    bottom: 0;
    width: 2em;
    right: -2em;
    flex-direction: column-reverse;
    text-align: center;
  }

  &.col {
    will-change: opacity, margin-top;

    html.animate-board & {
      transition: opacity $time-smooth $natural,
        margin-top $time-smooth $natural;
    }

    html.show-axis-labels & {
      margin-top: 0;
    }

    flex-direction: row;
    width: 100%;
    line-height: 2em;
    height: 1.5em;
    margin-top: -1.5em;

    html.board-only & {
      height: 2em;
      margin-top: calc(-2em + #{$edge});
    }
  }
}


.unplayed-bg {
  @include position-fill;
  border-radius: 0 $ptn-bg-radius $ptn-bg-radius 0;
  background-color: $primary-color-400;
}

html.animate-board #viewer:not(.animated) .unplayed-bg-cell {
  transition: none;
}


@for $size from 3 through 9 {
  .size-#{$size} {
    .square,
    .piece {
      width: percentage(1/$size);
      height: percentage(1/$size);
    }
  }

  @for $col from 0 through $size - 1 {
    .size-#{$size} .c#{$col} {
      left: percentage($col/$size);
    }
  }
  @for $row from 0 through $size - 1 {
    .size-#{$size} .r#{$row} {
      bottom: percentage($row/$size);
    }
  }
}

.controls {
  background-color: $primary-color-800;
  overflow: hidden;
  height: $toolbar-height;
  margin-bottom: -$toolbar-height;
  will-change: margin-bottom;
  z-index: 2;

  html.animate-board & {
    transition: margin-bottom $time-smooth $natural;
  }

  html.show-play-controls & {
    margin-bottom: 0;
  }

  .buttons {
    display: flex !important;
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: center;
    align-items: center;
    text-align: center;
    padding: $edge/2 $edge;
  }

  button {
    color: $whitish;
    width: 40px;
    height: 40px;
  }

  button.play {

    i {
      transition: opacity $time-smooth $natural;
      will-change: opacity;

      &.pause {
        position: absolute;
        opacity: 0;
      }
    }

    html.playing & {
      i.play {
        opacity: 0;
      }
      i.pause {
        opacity: 1;
      }
    }
  }
}
